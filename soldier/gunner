import pygame
from pygame import mixer
import os
import random
import csv
import button

mixer.init()
pygame.init()

tela_largura = 1350
tela_altura = 680
tela_rolar = 0
bg_rolar = 0
nivel = 1
img_list = []


tela = pygame.display.set_mode((tela_largura, tela_altura))
pygame.display.set_caption('TENTANDO DE NOVO')

start_intro = False
start_game = False
movimento_direita = False
movimento_esquerda = False
atirar = False
granada = False
granada_jogada = False

pygame.mixer.music.load('audio_music2.mp3')
pygame.mixer.music.set_volume(0.3)
pygame.mixer.music.play(-1, 0.0, 5000)

pulo_fx = pygame.mixer.Sound('audio_jump.wav')
pulo_fx.set_volume(0.5)

tiro_fx = pygame.mixer.Sound('audio_shot.wav')
tiro_fx.set_volume(0.5)

bomb_fx = pygame.mixer.Sound('audio_grenade.wav')
bomb_fx.set_volume(0.5)

start_img = pygame.image.load('img/start_btn.png').convert_alpha()
exit_img = pygame.image.load('img/exit_btn.png').convert_alpha()
restart_img = pygame.image.load('img/restart_btn.png').convert_alpha()

painel1_img = pygame.image.load('img/background/painel1.png').convert_alpha()
painel2_img = pygame.image.load('img/background/painel2.png').convert_alpha()
montanha_img = pygame.image.load('img/background/montanha.png').convert_alpha()
nuven_img = pygame.image.load('img/background/nuven.png').convert_alpha()
bala_img = pygame.image.load('img/ícones/bullet.png').convert_alpha()
granada_img = pygame.image.load('img/ícones/granada.png').convert_alpha()
caixa_granada_img = pygame.image.load('img/ícones/granada_caixa.png').convert_alpha()
caixa_municao_img = pygame.image.load('img/ícones/municao_caixa.png').convert_alpha()
caixa_vida_img = pygame.image.load('img/ícones/vida_caixa.png').convert_alpha()



item_caixas = {
    'Vida'  : caixa_vida_img,
    'Municao'  : caixa_municao_img,
    'Granada'  : caixa_granada_img,

}


def desenho_bg():
    tela.fill(BG)
    width = nuven_img.get_width()
    
    for x in range(5):
        tela.blit(nuven_img,((x * width) - bg_rolar * 0.5, 0))
        tela.blit(montanha_img, ((x * width) - bg_rolar * 0.6, tela_altura - montanha_img.get_height() - 300))
        tela.blit(painel1_img, ((x * width) - bg_rolar * 0.7, tela_altura - painel1_img.get_height() - 150))
        tela.blit(painel2_img, ((x * width) - bg_rolar * 0.8, tela_altura - painel2_img.get_height()))

def reiniciar_nivel():
    inimigo_grupo.empty()
    bala_grupo.empty()
    granada_grupo.empty()
    explode_grupo.empty()
    item_caixa_grupo.empty()
    decoracao_grupo.empty()
    agua_grupo.empty()
    sair_grupo.empty()


    data = []
    for linha in range(LINHAS):
        l = [-1] * COLUNAS
        data.append(l)
    
    return data




font = pygame.font.SysFont('Gabriola', 25)


def desenhar_texto(text, font, text_collor, x, y):
    img = font.render(text, True, text_collor)
    tela.blit(img, (x, y))


relogio = pygame.time.Clock()
FPS = 300
LIXO = 200
PESO = 1
RED = (255, 0, 0)
BLACK = (0, 0, 0)
YELLOW = (255, 255, 0)
PYNK = (255, 65, 54)
BG = (169, 169, 169)


TERRA_TAMANHO = 90
GRAVIDADE = 0.75
LINHAS = 16
COLUNAS = 150
TERRA_TAMANHO = tela_altura // LINHAS
TERRA_TIPO = 21
MAX_NIVEIS = 3


for x in range(TERRA_TIPO):
    img = pygame.image.load(f'img/terra/{x}.png')
    img = pygame.transform.scale(img,(TERRA_TAMANHO, TERRA_TAMANHO))
    img_list.append(img)


x = 200
y = 500
scale = 2


class Soldado(pygame.sprite.Sprite):
    def __init__(self, jogador_tipo, x, y, scale, velocidade, municao, granadas):
        pygame.sprite.Sprite.__init__(self)
        self.vivo = True
        self.jogador_tipo = jogador_tipo
        self.velocidade = velocidade
        self.municao = municao
        self.inicio_municao = municao
        self.direcao = 1
        self.vel_y = 0
        self.saude_vida = 100
        self.max_saude = self.saude_vida
        self.tiro_tempo = 0
        self.granadas = granadas
        self.pula = False
        self.no_ar = True
        self.virar = False
        self.lista_animacao = []
        self.frame_index = 0
        self.acao = 0
        self.atualizar_tempo = pygame.time.get_ticks()
        self.move_counter = 0
        self.visao = pygame.Rect(0, 0, 150, 20)
        self.ocioso = False
        self.ocioso = 0
        animacao_tipo = ['idle', 'run', 'jump', 'deth']
        
        for animacao in animacao_tipo:
            temp_list = []
            numero_de_frames = len(os.listdir(f'img/{self.jogador_tipo}/{animacao}'))
            
            for i in range(numero_de_frames):
                img = pygame.image.load(f'img/{self.jogador_tipo}/{animacao}/{i}.png').convert_alpha()
                img = pygame.transform.scale(img, (img.get_width() * scale, img.get_height() * scale))
                temp_list.append(img)
            
            self.lista_animacao.append(temp_list)
        
        self.image = self.lista_animacao[self.acao][self.frame_index]
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.width = self.image.get_width()
        self.height = self.image.get_height()


    def atirar(self):
        
        if self.tiro_tempo == 0 and self.municao > 0:
            self.tiro_tempo = 20
            bala = Bala(self.rect.centerx + (0.6 * self.rect.size[0] * self.direcao), \
            self.rect.centery, self.direcao)
            bala_grupo.add(bala)
            self.municao -= 1
            tiro_fx.play()


    def ai_inimigo(self):
        
        if self.vivo and jogador.vivo:
            
            if self.ocioso == False and random.randint(1, 200) == 1:
                self.atualizar_acao(0)
                self.ocioso = True
                self.ocioso_counter = 50
            
            if self.visao.colliderect(jogador.rect):
                self.atualizar_acao(0)
                self.atirar()
            
            else:
                
                if self.ocioso == False:
                    
                    if self.direcao == 1:
                        ai_inimigo_direita = True
                    
                    else:
                        ai_inimigo_direita = False
                    ai_inimigo_esquerda = not ai_inimigo_direita
                    self.movimento(ai_inimigo_direita, ai_inimigo_esquerda)
                    self.atualizar_acao(1)
                    self.move_counter += 1
                    self.visao.center = (self.rect.centerx + 75 * self.direcao, self.rect.centery)
                    
                    if self.move_counter > TERRA_TAMANHO:
                        self.direcao *= - 1
                        self.move_counter *= - 1
                
                else:
                    self.ocioso_counter -= 1
                    
                    if self.ocioso_counter <= 0:
                        self.ocioso = False
            
            self.rect.x += tela_rolar


    def atualizar_animacao(self):
        ANIMACAO_FRESH = 100
        self.image = self.lista_animacao[self.acao][self.frame_index]
        
        if pygame.time.get_ticks() - self.atualizar_tempo > ANIMACAO_FRESH:
            self.atualizar_tempo = pygame.time.get_ticks()
            self.frame_index += 1
        
        if self.frame_index >= len(self.lista_animacao[self.acao]):
            
            if self.acao == 3:
                self.frame_index = len(self.lista_animacao[self.acao]) -1
                self.kill()
            
            else:
                self.frame_index = 0


    def atualizar_acao(self, new_action):
        if new_action != self.acao:
            self.acao = new_action
            self.frame_index = 0
            self.atualizar_tempo = pygame.time.get_ticks()


    def checar_vida(self):
        if self.saude_vida <= 0:
            self.saude_vida = 0
            self.velocidade = 0
            self.vivo = False
            self.atualizar_acao(3)


    def desenho(self,):
        tela.blit(pygame.transform.flip(self.image, self.virar, False), self.rect)


    def atualizar(self):
        self.atualizar_animacao()
        self.checar_vida()
        if self.tiro_tempo > 0:
            self.tiro_tempo -= 1


    def movimento(self, movimento_direita, movimento_esquerda):
        tela_rolar = 0
        dx = 0
        dy = 0
        
        if movimento_esquerda:
            dx = - self.velocidade
            self.virar = True
            self.direcao = - 1 
        
        if movimento_direita:
            dx = self.velocidade
            self.virar = False
            self.direcao = 1
        
        if self.pula == True and self.no_ar == False:
            self.vel_y = - 13
            self.pula = False
            self.no_ar = True
        self.vel_y += GRAVIDADE
        
        if self.vel_y > 10:
            self.vel_y 
        dy += self.vel_y
        
        for terra in mundo.obstaculo_list:
            
            if terra[1].colliderect(self.rect.x + dx, self.rect.y, self.width, self.height):
                dx = 0
                
                if self.jogador_tipo == 'inimigo':
                    self.direcao*= -1
                    self.move_counter = 0
            
            if terra[1].colliderect(self.rect.x, self.rect.y + dy, self.width, self.height):
                
                if self.vel_y <= 0:
                    self.vel_y = 0
                    dy = terra[1].bottom - self.rect.top
                
                elif self.vel_y >= 0:
                    self.vel_y = 0
                    self.no_ar = False
                    dy = terra[1].top - self.rect.bottom

        if pygame.sprite.spritecollide(self, agua_grupo,False):
            self.saude_vida = 0
        nivel_completo = False
        if pygame.sprite.spritecollide(self, sair_grupo,False):
            nivel_completo = True


        if self.rect.bottom > tela_altura:
             self.saude_vida = 0           

        if self.jogador_tipo == 'jogador':
            if self.rect.left + dx < 0 or self.rect.right + dx > tela_largura:
                dx = 0
                   
        self.rect.x += dx
        self.rect.y += dy
               
        if self.jogador_tipo == 'jogador':
            
            if (self.rect.right > tela_largura - LIXO and bg_rolar < (mundo.nivel_lenght * TERRA_TAMANHO) - tela_largura)\
                or (self.rect.left < LIXO and bg_rolar > abs(dx)):
                self.rect.x -= dx
                tela_rolar = - dx
        
        return tela_rolar, nivel_completo

    
class Mundo():
    def __init__(self):
        self.obstaculo_list = []


    def processo_data(self, data):
        self.nivel_lenght = len(data[0])


        for y, linha in enumerate(data):
            
            for x, terra in enumerate(linha):
                
                if terra >= 0:
                    img = img_list[terra]
                    img_rect = img.get_rect()
                    img_rect.x = x * TERRA_TAMANHO
                    img_rect.y = y * TERRA_TAMANHO
                    terra_data = (img, img_rect)
                    
                    if terra >= 0 and terra <= 8:
                        self.obstaculo_list.append(terra_data)
                    
                    if terra >= 9 and terra <= 10:
                        agua = Agua(img, x * TERRA_TAMANHO, y * TERRA_TAMANHO)
                        agua_grupo.add(agua)
                    
                    elif terra >= 11 and terra <= 14:
                        decoracao = Decoracao(img, x * TERRA_TAMANHO, y * TERRA_TAMANHO)
                        decoracao_grupo.add(decoracao)
                    
                    elif terra == 15:
                        jogador = Soldado('jogador', x * TERRA_TAMANHO, y * TERRA_TAMANHO, scale, 5, 20, 10)
                        barra_vida = Barra_Vida(10, 10, jogador.saude_vida, jogador.saude_vida)
                    
                    elif terra == 16:
                        inimigo = Soldado('inimigo', x * TERRA_TAMANHO, y * TERRA_TAMANHO, scale, 2, 20, 5)
                        inimigo_grupo.add(inimigo)
                    
                    elif terra == 17:
                        item_caixa = ItemCaixa('Municao', x * TERRA_TAMANHO, y * TERRA_TAMANHO)
                        item_caixa_grupo.add(item_caixa)
                    
                    elif terra == 18:
                        item_caixa = ItemCaixa('Granada', x * TERRA_TAMANHO, y * TERRA_TAMANHO)
                        item_caixa_grupo.add(item_caixa)
                    
                    elif terra == 19:
                        item_caixa = ItemCaixa('Vida', x * TERRA_TAMANHO, y * TERRA_TAMANHO)
                        item_caixa_grupo.add(item_caixa)
                    
                    elif terra == 20:
                        sair = Sair(img, x * TERRA_TAMANHO, y * TERRA_TAMANHO)
                        sair_grupo.add(sair)
        
        return jogador, barra_vida


    def draw(self):
        
        for terra in self.obstaculo_list:
            terra[1][0] += tela_rolar
            tela.blit(terra[0], terra[1])                  


class Decoracao(pygame.sprite.Sprite):
    def __init__(self, img, x, y):
        self.image = img
        pygame.sprite.Sprite.__init__(self)
        self.rect = self.image.get_rect()
        self.rect.midtop = (x + TERRA_TAMANHO // 2, y + (TERRA_TAMANHO - self.image.get_height()))


    def update(self):
        self.rect.x += tela_rolar


class Agua(pygame.sprite.Sprite):
    def __init__(self, img, x, y):
        self.image = img
        pygame.sprite.Sprite.__init__(self)
        self.rect = self.image.get_rect()
        self.rect.midtop = (x + TERRA_TAMANHO // 2, y + (TERRA_TAMANHO - self.image.get_height()))


    def update(self):
        self.rect.x += tela_rolar


class Sair(pygame.sprite.Sprite):
    def __init__(self, img, x, y):
        self.image = img
        pygame.sprite.Sprite.__init__(self)
        self.rect = self.image.get_rect()
        self.rect.midtop = (x + TERRA_TAMANHO // 2, y + (TERRA_TAMANHO - self.image.get_height()))


    def update(self):
        self.rect.x += tela_rolar


class ItemCaixa(pygame.sprite.Sprite):
    def __init__(self, item_type, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.item_type = item_type
        self.image = item_caixas[self.item_type]
        self.rect = self.image.get_rect()
        self.rect.midtop = (x + TERRA_TAMANHO // 2, y + (TERRA_TAMANHO - self.image.get_height()))


    def update(self,):
        self.rect.x += tela_rolar
        
        if pygame.sprite.collide_rect(self, jogador):
            
            if self.item_type == 'Vida':
                jogador.saude_vida += 25
                
                if jogador.saude_vida > jogador.max_saude:
                    jogador.saude_vida = jogador.max_saude
            
            elif self.item_type == 'Municao':
                jogador.municao += 15

            elif self.item_type == 'Granada':
                jogador.granadas += 3
            
            self.kill()
            

class Barra_Vida():
    def __init__(self, x, y, saude_vida, max_saude):
        pygame.sprite.Sprite.__init__(self)
        self.x = x
        self.y = y
        self.saude_vida = saude_vida
        self.max_saude = max_saude


    def desenhar_barra(self, saude_vida):
        self.saude_vida = saude_vida
        por_vida = self.saude_vida / self.max_saude
        pygame.draw.rect(tela, BLACK, (self.x -2, self.y -2, 164, 24))        
        pygame.draw.rect(tela, RED,(self.x, self.y, 160, 20))
        pygame.draw.rect(tela, YELLOW, (self.x, self.y, 160 * por_vida, 20))        


class Bala(pygame.sprite.Sprite):
    def __init__(self, x, y, direcao):
        pygame.sprite.Sprite.__init__(self)
        self.velocidade = 10
        self.image = bala_img 
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.direcao = direcao


    def update(self):
        self.rect.x += (self.direcao * self.velocidade) + tela_rolar
        
        if self.rect.right < 10 or self.rect.left > tela_largura - 10:
            self.kill()
        
        for terra in mundo.obstaculo_list:
            
            if terra[1].colliderect(self.rect):
                self.kill()
        
        if pygame.sprite.spritecollide(jogador, bala_grupo, False):
            
            if jogador.vivo:
                jogador.saude_vida -= 5
                self.kill()       
        
        for inimigo in inimigo_grupo:
            
            if pygame.sprite.spritecollide(inimigo, bala_grupo, False):
                
                if inimigo.vivo:
                    inimigo.saude_vida -= 50
                    self.kill()
        

class Granada(pygame.sprite.Sprite):
    def __init__(self, x, y, direcao):
        pygame.sprite.Sprite.__init__(self)
        self.tempo = 35
        self.vel_y = -11
        self.velocidade = 7
        self.image = granada_img 
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.width = self.image.get_width() 
        self.height = self.image.get_height()
        self.direcao = direcao
        

    def update(self):
        self.vel_y += GRAVIDADE
        dx = self.direcao * self.velocidade
        dy = self.vel_y
        
        for terra in mundo.obstaculo_list:
            
            if terra[1].colliderect(self.rect.x, self.rect.y, self.width, self.height):
                self.direcao *= -1
                dx = self.direcao * self.velocidade
                
                if terra[1].colliderect(self.rect.x, self.rect.y + dy, self.width, self.height):
                    self.velocidade = 0
                    
                    if self.vel_y < 0:
                        self.vel_y = 0
                        dy = terra[1].bottom - self.rect.top
                
                elif self.vel_y >= 0:
                    self.vel_y = 0
                    dy = terra[1].top - self.rect.bottom
        
        if self.rect.left + dx < 10 or self.rect.right + dy > tela_largura - 10:
            self.direcao *= -1
            dx = self.direcao * self.velocidade       
        
        self.rect.x += dx + tela_rolar
        self.rect.y += dy
        self.tempo -= 1
        
        if self.tempo <= 0:
            bomb_fx.play()
            self.kill()
            explode = Explode(self.rect.x, self.rect.y, 0.5)
            explode_grupo.add(explode)
            
            if abs(self.rect.centerx - jogador.rect.centerx)<= TERRA_TAMANHO * 2 and \
                abs(self.rect.centery - jogador.rect.centery)<= TERRA_TAMANHO * 2:
                jogador.saude_vida -= 100
            
            for inimigo in inimigo_grupo:
                
                if abs(self.rect.centerx - inimigo.rect.centerx)< TERRA_TAMANHO * 2 and \
                    abs(self.rect.centery - inimigo.rect.centery)< TERRA_TAMANHO * 2:
                    inimigo.saude_vida -= 100


class Explode(pygame.sprite.Sprite):
    def __init__(self, x, y, scale):
        pygame.sprite.Sprite.__init__(self)
        self.images = []
        
        for num in range(1, 6):
            img = pygame.image.load(f'img/explosao/exp{num}.png').convert_alpha()
            img = pygame.transform.scale(img,(int(img.get_width() * 2), int(img.get_height() * 2)))
            self.images.append(img)
        
        self.frame_index = 0
        self.image = self.images[self.frame_index] 
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.counter = 0


    def update(self):
        self.rect.x += tela_rolar
        EXPLODE_VELOCIDADE = 4
        self.counter += 1
        
        if self.counter >= EXPLODE_VELOCIDADE:
            self.counter = 0
            self.frame_index += 1
        
        if self.frame_index >= len(self.images):  
            self.kill()
                  
        
        else:
            self.image = self.images[self.frame_index] 


class Tela_Transicao():
    def __init__(self, direcao, cores, velocidade):
        self.direcao = direcao
        self.cores = cores
        self.velocidade = velocidade
        self.transicao_counter = 0

    def transicao(self):
        transicao_completa = False
        self.transicao_counter += self.velocidade

        if self.direcao == 1:
            pygame.draw.rect(tela, self.cores, (0 - self.transicao_counter, 0, tela_largura // 2, tela_altura))
            pygame.draw.rect(tela, self.cores, (tela_largura // 2 + self.transicao_counter, 0, tela_largura, tela_altura))
            pygame.draw.rect(tela, self.cores, (0, 0 - self.transicao_counter, tela_largura, tela_altura // 2))
            pygame.draw.rect(tela, self.cores, (0, tela_altura // 2 + self.transicao_counter, tela_largura, tela_altura))

        if self.direcao == 2:
            pygame.draw.rect(tela, self.cores, (0, 0, tela_largura, 0 + self.transicao_counter))
        if self.transicao_counter >= tela_largura:
            transicao_completa = True

        return transicao_completa

intro_transicao = Tela_Transicao(1, BLACK, 10)
morrer_transicao = Tela_Transicao(2, PYNK, 10)


start_button = button.Button(tela_largura // 2 - 150, tela_altura // 2 - 100, start_img, 1)
exit_button = button.Button(tela_largura // 2 - 130, tela_altura // 2 + 100, exit_img, 1)
restart_button = button.Button(tela_largura // 2 - 100, tela_altura // 2 + 50, restart_img, 3)

inimigo_grupo = pygame.sprite.Group()
bala_grupo = pygame.sprite.Group()
granada_grupo = pygame.sprite.Group()
explode_grupo = pygame.sprite.Group()
item_caixa_grupo = pygame.sprite.Group()
decoracao_grupo = pygame.sprite.Group()
agua_grupo = pygame.sprite.Group()
sair_grupo = pygame.sprite.Group()



terra_data = []
for linha in range(LINHAS):
    l = [-1] * COLUNAS
    terra_data.append(l)


with open(f'nivel{nivel}_data.csv', newline= '') as csvfile:
    reader = csv.reader(csvfile, delimiter=',')
    
    for x, linha in enumerate(reader):
        
        for y, terra in enumerate(linha):
            terra_data[x][y] = int(terra)


mundo = Mundo()

jogador, barra_vida = mundo.processo_data(terra_data)            

run = True

while run:
    relogio.tick(FPS)
    
    if start_game == False:
        tela.fill(BG)
        
        if start_button.draw(tela):
            start_game = True
            start_intro = True
        
        if exit_button.draw(tela):
            run = False
    
    else:            
        desenho_bg()
        mundo.draw()
        
        barra_vida.desenhar_barra(jogador.saude_vida)
        
        desenhar_texto(f'Municao: ', font, RED, 10, 60)
        
        for x in range(jogador.municao):
            tela.blit(bala_img,(100 + (x * 10),70))
        
        desenhar_texto(f'Granada:', font, RED, 10, 90)
        
        for x in range(jogador.granadas):
            tela.blit(granada_img,(100 + (x * 15), 100))        
        
        jogador.atualizar()
        jogador.desenho()
        
        for inimigo in inimigo_grupo:
            inimigo.ai_inimigo()
            inimigo.atualizar()
            inimigo.desenho()
        
        bala_grupo.update()
        item_caixa_grupo.update()
        granada_grupo.update()
        explode_grupo.update()
        decoracao_grupo.update()
        agua_grupo.update()
        sair_grupo.update()
        
        bala_grupo.draw(tela)
        item_caixa_grupo.draw(tela)
        granada_grupo.draw(tela)
        explode_grupo.draw(tela)
        decoracao_grupo.draw(tela)
        agua_grupo.draw(tela)
        sair_grupo.draw(tela)


        if start_intro == True:
            if intro_transicao.transicao():
                start_intro = False
                intro_transicao.transicao_counter = 0

        
        if jogador.vivo:
            if atirar:
                jogador.atirar()  
            
            if granada and granada_jogada == False and jogador.granadas > 0:
                granada = Granada(jogador.rect.centerx + (0.6 * jogador.rect.size[0] * jogador.direcao), jogador.rect.top, jogador.direcao)
                granada_grupo.add(granada)
                jogador.granadas -= 1
                granada_jogada = True
            
            if jogador.no_ar:
                jogador.atualizar_acao(2)
            
            elif movimento_direita or movimento_esquerda:
                jogador.atualizar_acao(1)
            
            else:
                jogador.atualizar_acao(0) 
            
            tela_rolar, nivel_completo = jogador.movimento(movimento_direita, movimento_esquerda)
            bg_rolar -= tela_rolar

            if nivel_completo:
                start_intro = True
                nivel += 1
                bg_rolar = 0
                terra_data = reiniciar_nivel()
                if nivel <= MAX_NIVEIS:
                    terra_data = reiniciar_nivel()
                    with open(f'nivel{nivel}_data.csv', newline= '') as csvfile:
                        reader = csv.reader(csvfile, delimiter=',')
                        
                        for x, linha in enumerate(reader):
                            
                            for y, terra in enumerate(linha):
                                terra_data[x][y] = int(terra)                    
                    mundo = Mundo()

                    jogador, barra_vida = mundo.processo_data(terra_data)            


        else:
            if morrer_transicao.transicao():
                tela_rolar = 0
                
                if restart_button.draw(tela):
                    morrer_transicao.transicao_counter = 0
                    start_intro = True
                    bg_rolar = 0


                    terra_data = reiniciar_nivel()
                    with open(f'nivel{nivel}_data.csv', newline= '') as csvfile:
                        reader = csv.reader(csvfile, delimiter=',')
                        
                        for x, linha in enumerate(reader):
                            
                            for y, terra in enumerate(linha):
                                terra_data[x][y] = int(terra)


                    mundo = Mundo()

                    jogador, barra_vida = mundo.processo_data(terra_data)            



    for event in pygame.event.get():
        
        if event.type == pygame.QUIT:
            run = False
        
        if event.type == pygame.KEYDOWN:
            
            if event.key == pygame.K_a:
                movimento_esquerda = True
            
            if event.key == pygame.K_d:
                movimento_direita = True
            
            if event.key == pygame.K_w and jogador.vivo:
                jogador.pula = True
                pulo_fx.play()
            
            if event.key == pygame.K_SPACE:
                atirar = True
            
            if event.key == pygame.K_q:
                granada = True
                                                    
            if event.key == pygame.K_ESCAPE:
                run = False


        if event.type == pygame.KEYUP:
            
            if event.key == pygame.K_a:
                movimento_esquerda = False
            
            if event.key == pygame.K_d:
                movimento_direita = False
            
            if event.key == pygame.K_SPACE:
                atirar = False
            
            if event.key == pygame.K_q:
                granada = False 
                granada_jogada = False                

    pygame.display.update()

pygame.quit()
